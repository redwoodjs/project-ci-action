name: 🌲 Redwood build, lint, diagnostics, and tests
description: Run CI on a Redwood Project

inputs:
  node-version:
    description: Node.js Version. Default is `18`.
    default: 18

  project-directory:
    description: Path to project directory. Default is '.'.
    default: '.'

  yarn-cache:
    description: Enable Yarn caching. Default is `true`.
    default: true

  run-lint:
    description: Run lint. Default is `true`.
    default: true

  github-token:
    description: GITHUB_TOKEN
    default: '${{ github.token }}'


runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    - name: ⬢ Enable Corepack
      run: corepack enable
      shell: bash
      working-directory: ${{ inputs.project-directory }}

    - name: ⬢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: 🐘 Set up Postgres
      uses: CasperWA/postgresql-action@v1
      with:
        postgresql version: 14
        postgresql db: test
        postgresql user: test
        postgresql password: password

    - name: 📁 Get yarn cache directory
      if: ${{ inputs.yarn-cache == 'true' }}
      id: get-yarn-cache-directory
      run: echo "CACHE_DIRECTORY=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: ${{ inputs.project-directory }}

    - name: ♻️ Restore yarn cache
      if: ${{ inputs.yarn-cache == 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ steps.get-yarn-cache-directory.outputs.CACHE_DIRECTORY }}
        key: yarn-cache-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
        restore-keys: yarn-cache-${{ runner.os }}
    
    - name: 🐈 Yarn install
      run: yarn install --inline-builds
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: ◭ Run migrate
      run: yarn rw prisma migrate dev
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      env:
        DATABASE_URL: postgresql://test:password@localhost:5432/test
      
    - name: 🏗️ Run build
      run: yarn rw build
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      env:
        DATABASE_URL: postgresql://test:password@localhost:5432/test

    - name: 🔎 Run lint
      if: ${{ inputs.run-lint == 'true' }}
      run: yarn rw lint
      shell: bash
      working-directory: ${{ inputs.project-directory }}

    - name: 🔬 Run diagnostics
      run: yarn rw check
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      
    - name: 🧪 Run tests
      run: |
        yarn rw test api --no-watch
        yarn rw test web --no-watch
      shell: bash
      working-directory: ${{ inputs.project-directory }}
      env:
        TEST_DATABASE_URL: postgresql://test:password@localhost:5432/test
